package ${pkgPath};

import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import lombok.extern.slf4j.Slf4j;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.lang.ftd.common.tools.mybatisUtils.pagination.BaseModel;
import com.lang.ftd.common.tools.mybatisUtils.pagination.PageMyBatis;
import ${managerPath};
import ${modelPath};
 
/**
 * @Title:${clzComment}Controller
 * @Description: TODO
 * @author ${clzAuthor}
 * @since ${clzCreateDate}
 * @version V1.0  
 */
@RestController
@Slf4j
@RequestMapping("/${clzNameLC}")
public class ${clzName}Controller {

	
	@Autowired
	private ${clzName}Service ${clzNameLC}Service;


	@RequestMapping(method=RequestMethod.GET)
	public PageMyBatis<${clzName}> list(HttpServletRequest request ,HttpServletResponse response ,BaseModel baseModel,${clzName} ${clzNameLC}){
		return ${clzNameLC}Service.findByPage(baseModel,${clzNameLC});
	}
	
	
	@RequestMapping(value="/{id}",method=RequestMethod.GET)
	public ${clzName} one(HttpServletRequest request ,HttpServletResponse response ,@PathVariable("id")Integer id){
		return ${clzNameLC}Service.get(id);
	}
	
	@RequestMapping(value="/{id}",method=RequestMethod.DELETE)
	public void delete(HttpServletRequest request ,HttpServletResponse response ,@PathVariable("id")Integer id){
		int count = ${clzNameLC}Service.delete(id);
		if(count!=1){
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
		}
	}
	
	@RequestMapping(method=RequestMethod.PUT)
	public ${clzName} update(HttpServletRequest request ,HttpServletResponse response ,${clzName} ${clzNameLC}){
		response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
		if(Optional.ofNullable(${clzNameLC}).isPresent()&&Optional.ofNullable(${clzNameLC}.getId()).isPresent()&&${clzNameLC}.getId()>0){
			int count = ${clzNameLC}Service.update4Selective(${clzNameLC});
			if(count!=1){
				response.setStatus(HttpServletResponse.SC_OK);
			}
		}
		return ${clzNameLC};
				
	}
	
	@RequestMapping(method=RequestMethod.POST)
	public ${clzName} add(HttpServletRequest request ,HttpServletResponse response ,${clzName} ${clzNameLC}){
		response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
		if(Optional.ofNullable(${clzNameLC}).isPresent()&&(!Optional.ofNullable(${clzNameLC}.getId()).isPresent()||${clzNameLC}.getId()<=0)){
			int count = ${clzNameLC}Service.create(${clzNameLC});
			if(count!=1){
				response.setStatus(HttpServletResponse.SC_OK);
			}
		}
		return ${clzNameLC};
	}
}
